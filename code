#### **Example Verilog Code (Basic FIFO)**  
```verilog
module fifo #(
    parameter WIDTH = 8,
    parameter DEPTH = 16,
    parameter ADDR_WIDTH = 4
)(
    input clk, rst,
    input wr_en, rd_en,
    input [WIDTH-1:0] din,
    output reg [WIDTH-1:0] dout,
    output full, empty
);
    reg [WIDTH-1:0] mem [0:DEPTH-1];
    reg [ADDR_WIDTH-1:0] write_ptr = 0, read_ptr = 0;
    reg [ADDR_WIDTH:0] count = 0;

    assign full = (count == DEPTH);
    assign empty = (count == 0);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            write_ptr <= 0;
            read_ptr <= 0;
            count <= 0;
        end else begin
            if (wr_en && !full) begin
                mem[write_ptr] <= din;
                write_ptr <= write_ptr + 1;
                count <= count + 1;
            end
            if (rd_en && !empty) begin
                dout <= mem[read_ptr];
                read_ptr <= read_ptr + 1;
                count <= count - 1;
            end
        end
    end
endmodule
```

#### **Testbench Code**  
```verilog
module testbench;
    reg clk = 0, rst = 0;
    reg wr_en, rd_en;
    reg [7:0] din;
    wire [7:0] dout;
    wire full, empty;

    fifo uut (.clk(clk), .rst(rst), .wr_en(wr_en), .rd_en(rd_en), .din(din), .dout(dout), .full(full), .empty(empty));

    always #5 clk = ~clk;

    initial begin
        $monitor("Time=%0d din=%h dout=%h wr=%b rd=%b full=%b empty=%b", $time, din, dout, wr_en, rd_en, full, empty);
        rst = 1; #10; rst = 0;

        // Write 4 values
        wr_en = 1; rd_en = 0;
        din = 8'hA1; #10;
        din = 8'hB2; #10;
        din = 8'hC3; #10;
        din = 8'hD4; #10;

        // Read 4 values
        wr_en = 0; rd_en = 1; #40;

        $finish;
    end
endmodule
```

#### **Expected Output**
```
Time=10 din=A1 dout=xx wr=1 rd=0 full=0 empty=0  
Time=20 din=B2 dout=xx wr=1 rd=0 full=0 empty=0  
...  
Time=50 din=xx dout=A1 wr=0 rd=1 full=0 empty=0  
Time=60 din=xx dout=B2 wr=0 rd=1 full=0 empty=0  
...
